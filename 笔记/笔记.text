递归函数名可以用：arguments.callee
函数内引用函数外的变量 就会引起闭包
flex的6种属性
决定主轴的方向(即项目的排列方向)
flex-direction: row | row-reverse | column | column-reverse;
默认情况下，项目都排在主轴线上，使用 flex-wrap 可实现项目的换行。
flex-wrap: nowrap | wrap | wrap-reverse;
缩写
flex-flow: <flex-direction> || <flex-wrap>;
定义了项目在主轴的对齐方式。
justify-content: flex-start | flex-end | center | space-between | space-around;
定义了项目在交叉轴上的对齐方式
align-items: flex-start | flex-end | center | baseline | stretch;
定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用
align-content: flex-start | flex-end | center | space-between | space-around | stretch;


item：
order：排列顺序
 定义项目的放大比例
flex-grow: <number>;
 定义了项目的缩小比例
flex-shrink: <number>;
以上两者的缩放比例是相对于子级的，并且是相对于可以分配的空间的，比如flex-grow，子级的各个比例是去分配空余的空间的

当 flex-wrap 为 wrap | wrap-reverse，且子项宽度和不及父容器宽度时，flex-grow 会起作用，子项会根据 flex-grow 设定的值放大（为0的项不放大）
当 flex-wrap 为 wrap | wrap-reverse，且子项宽度和超过父容器宽度时，首先一定会换行，换行后，每一行的右端都可能会有剩余空间（最后一行包含的子项可能比前几行少，
所以剩余空间可能会更大），这时 flex-grow 会起作用，若当前行所有子项的 flex-grow 都为0，则剩余空间保留，若当前行存在一个子项的 flex-grow 不为0，则剩余空间会被 flex-grow 不为0的子项占据
当 flex-wrap 为 nowrap，且子项宽度和不及父容器宽度时，flex-grow 会起作用，子项会根据 flex-grow 设定的值放大（为0的项不放大）
当 flex-wrap 为 nowrap，且子项宽度和超过父容器宽度时，flex-shrink 会起作用，子项会根据 flex-shrink 设定的值进行缩小（为0的项不缩小）。
但这里有一个较为特殊情况，就是当这一行所有子项 flex-shrink 都为0时，也就是说所有的子项都不能缩小，就会出现讨厌的横向滚动条
总结上面四点，可以看出不管在什么情况下，在同一时间，flex-shrink 和 flex-grow 只有一个能起作用，这其中的道理细想起来也很浅显：
空间足够时，flex-grow 就有发挥的余地，而空间不足时，flex-shrink 就能起作用。
当然，flex-wrap 的值为 wrap | wrap-reverse 时，表明可以换行，既然可以换行，一般情况下空间就总是足够的，flex-shrink 当然就不会起作用


align-self: 允许单个项目有与其他项目不一样的对齐方式